;;cycle_detection(x): detects if there is a cycle in x
;;--------------------------------------------------------------------
@pre: true
;;--------------------------------------------------------------------
@post: found => ls (x, tort) && circ_ls(tort.next, hare)
&& ~found => ls(x, nil)
;;--------------------------------------------------------------------


if (x == nil)
	found := false
	return found
else
	if (x.next == nil)
		found := false
		return found
	else
		if (x.next.next == nil)
			found := false
			return found
		else
			tort := x.next
			hare := x.next.next
			while (hare != nil)
@inv: ls(x, tort) && tort =/= nil && ls(tort.next, hare)
				if (tort == hare)
					found := true
					return found
				else 
					if (hare.next == nil)
						found := false
						return found
					else
						hare := hare.next.next
						tort := tort.next
			endwhile
			found := false
			return found