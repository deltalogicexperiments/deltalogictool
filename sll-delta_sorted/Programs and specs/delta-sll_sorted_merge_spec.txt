;;sorted_merge(x, y): merges two sorted lists into another 'ret'
;;------------------------------------------------------------------------------------------
@pre: ls(x, nil) && ls(y, nil) && sorted(x, nil) && sorted(y, nil) 
&& hls(x, nil) \intersect hls(y, nil) = \empty
&& hls(x, nil) \union hls(y, nil) = H
&& mkeys(x, nil) \union mkeys(y, nil) = M
;;------------------------------------------------------------------------------------------
@post: ls(ret, nil) && sorted(ret, nil)
&& hls(ret, nil) = H && mkeys(ret, nil) = M
;;------------------------------------------------------------------------------------------

if(x == nil)
	return y
	else
	if (y == nil)
		return x
	else
		if (x.key <= y.key)
			ret := x
			temp := ret
			x := x.next
			temp.next := nil
		else
			ret := y
			temp := ret
			y := y.next
			temp.next := nil
		while ( x != nil && y != nil)
@inv: ls(x, nil) && ls(y, nil) && ls(ret, temp) && temp.next ==nil
&& sorted(x, nil) && sorted(y, nil) && sorted(ret, nil) 
&& hls(x, nil) \intersect hls(y, nil) = \empty
&& hls(x, nil) \intersect hls(ret, nil) = \empty
&& hls(y, nil) \intersect hls(ret, nil) = \empty
&& (x =/= nil) => max(ret, nil) <= min(x, nil)
&& (y =/= nil) => max(ret, nil) <= min(y, nil)
&& hls(x, nil) \union hls(y, nil) \union hls(ret, nil) = H
&& mkeys(x, nil) \union mkeys(y, nil) \union mkeys(ret, nil) = M
			if (x.key <= y.key)
				temp.next := x
				x := x.next
				temp := temp.next
				temp.next := nil
			else
				temp.next := y
				y := y.next
				temp := temp.next
				temp.next := nil
		endwhile
		
		if (x == nil)
			temp.next := y
			return ret
		else
			temp.next := x
			return ret